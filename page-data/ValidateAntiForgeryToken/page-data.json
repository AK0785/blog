{"componentChunkName":"component---src-templates-blog-post-js","path":"/ValidateAntiForgeryToken/","result":{"data":{"site":{"siteMetadata":{"title":"Notes on .NET Development"}},"markdownRemark":{"id":"4681b9e3-7316-59c0-b8ee-2ebdecdfa6c8","excerpt":"Posting via Postman with ValidateAntiForgeryToken Decorators within ASP.NET MVC Core Working on side projects is a great way to ensure that your skills remain…","html":"<h2>Posting via Postman with [ValidateAntiForgeryToken] Decorators within ASP.NET MVC Core</h2>\n<p>Working on side projects is a great way to ensure that your skills remain up to date. It is also a great opportunity to use some of the newest versions of C#, .NET Core and Entity Framework - especially when you are developing a heavy back-end solution!</p>\n<p>Over the Easter Weekend, I committed to getting the core of my side project in place - EF Code First, Controllers, Views and some Form Submissions!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpPost</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ValidateAntiForgeryToken</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IActionResult<span class=\"token punctuation\">></span></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, an interesting challenge. Testing a controller action that is decorated with <code class=\"language-text\">[ValidateAntiForgeryToken]</code>. Disabling the decorator is one option, but <strong>not recommended</strong>. After all, it will be running in production, so best to check it is protecting against XSRF!</p>\n<h3>How to get the token</h3>\n<p>Within a form, <code class=\"language-text\">__RequestVerificationToken</code> is injected into a hidden field and used server side in the anti-forgery validation.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">pm<span class=\"token punctuation\">.</span><span class=\"token function\">sendRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://....\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> html <span class=\"token operator\">=</span> <span class=\"token function\">cheerio</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=\"__RequestVerificationToken\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pm<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xsrf-token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Using the above JavaScript, Postman can execute a pre-request script:</p>\n<ol>\n<li>Issue a request to the form page</li>\n<li>Parse the HTML response</li>\n<li>Find a hidden input named <code class=\"language-text\">___RequestVerificationToken</code></li>\n<li>Retrieve the <strong>first</strong> token it finds (assuming it might find > 1)</li>\n<li>Sets an environment variable to match the retrieved token</li>\n</ol>\n<h3>Posting with Postman</h3>\n<p>Now that we have the <code class=\"language-text\">___RequestVerificationToken</code> we can use it in our POST requests and therefore <em>pass</em> the anti-forger validator.</p>\n<h3>Do I really need to decorate every, single, POST, request?</h3>\n<p>No and a far better way is to set <code class=\"language-text\">[AutoValidateAntiForgeryToken]</code> as a global filter within the <code class=\"language-text\">ConfigureServices</code> method of the <code class=\"language-text\">Startup</code> class. Safe requests (GET/HEAD) are automatically ignored, Unsafe requests (POST/PUT/PATCH/DELETE) are required to validate.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddMvc</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> \noptions<span class=\"token punctuation\">.</span>Filters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AutoValidateAntiforgeryTokenAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>The key benefit with following this pattern is that the XSRF protection is automatically applied. If you forget to decorate a controller method and you’re not configured to use <code class=\"language-text\">[AutoValidateAntiForgeryToken]</code> then your web app is at risk. And, you get to write a little less code in the process!</p>\n</blockquote>\n<h4>Attribution(s) &#x26; Recommended Reading</h4>\n<ul>\n<li>Marius Schulz (<a href=\"https://mariusschulz.com/blog/global-antiforgery-token-validation-in-asp-net-core\">https://mariusschulz.com/blog/global-antiforgery-token-validation-in-asp-net-core</a>)</li>\n<li>Andrew Lock (<a href=\"https://andrewlock.net/automatically-validating-anti-forgery-tokens-in-asp-net-core-with-the-autovalidateantiforgerytokenattribute/\">https://andrewlock.net/automatically-validating-anti-forgery-tokens-in-asp-net-core-with-the-autovalidateantiforgerytokenattribute/</a>)</li>\n<li>Ankur Sheel (<a href=\"https://www.ankursheel.com/blog/postman-ajax-endpoints-xsrf-tokens\">https://www.ankursheel.com/blog/postman-ajax-endpoints-xsrf-tokens</a>)</li>\n<li>Wikipedia (<a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">https://en.wikipedia.org/wiki/Cross-site_request_forgery</a>)</li>\n<li>MS Docs (<a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-5.0\">https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-5.0</a>)</li>\n</ul>","frontmatter":{"title":"ValidateAntiForgeryToken","date":"April 21, 2021","description":"Notes on testing with ValidateAntiForgeryToken using Postman."}},"previous":null,"next":null},"pageContext":{"id":"4681b9e3-7316-59c0-b8ee-2ebdecdfa6c8","previousPostId":null,"nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}
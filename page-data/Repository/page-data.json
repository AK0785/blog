{"componentChunkName":"component---src-templates-blog-post-js","path":"/Repository/","result":{"data":{"site":{"siteMetadata":{"title":"Notes on .NET Development"}},"markdownRemark":{"id":"13b1837b-a8bd-57eb-90bc-2f3655f05783","excerpt":"The Fat Controller The original controller looked like this and returned the View. While this works this is a ‘Fat Controller’ - it does more than simply take a…","html":"<h2>The Fat Controller</h2>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> counselleeSearched <span class=\"token operator\">=</span> <span class=\"token keyword\">from</span> c <span class=\"token keyword\">in</span> _context<span class=\"token punctuation\">.</span>Counsellees\n    <span class=\"token keyword\">select</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>searchString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                counselleeSearched <span class=\"token operator\">=</span> counselleeSearched<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n                c<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>searchString<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> c<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>searchString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> counselleeSearched<span class=\"token punctuation\">.</span><span class=\"token function\">ToListAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The original controller looked like this and returned the View. While this works this is a ‘Fat Controller’ - it does more than simply take a request, orchestrate and return the view. The controller has data access logic implemented right within the heart of it. In order to start to implement the repository pattern, we need to move this code out of the controller and put it somehwere else - into a new Model that will become the Repository.</p>\n<h2>A Repository and Interface</h2>\n<p>By createing a new interface <code class=\"language-text\">cs ICounselleeRepository</code> and exposing the same “Find Counsellee” method, the controller can be refactored to call an interface method instead of handling the implementation itself. This also means that it is easier to reuse across the application.</p>\n<h2>Dependency Injection</h2>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICounselleeRepository<span class=\"token punctuation\">,</span> CounselleeRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In order to use the new repository we need to modify <code>startup.cs</code> and include a new service in scope. This will then ensure that when the controller asks for CounselleeRepository, the Dependency Injection Container knows how to process - in this case, the interface.</p>\n<h4>Attribution(s) &#x26; Recommended Reading</h4>\n<ul>\n<li>The Repository Pattern (<a href=\"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design\">https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design</a>)</li>\n</ul>","frontmatter":{"title":"Basic Repository Implementation","date":"April 24, 2021","description":"Notes on the start of a repository pattern implementation"}},"previous":{"fields":{"slug":"/Passing Data from a Controller to a View/"},"frontmatter":{"title":"User Notifications"}},"next":null},"pageContext":{"id":"13b1837b-a8bd-57eb-90bc-2f3655f05783","previousPostId":"932b6df0-4e06-5ff6-b3fb-00cf07ee3649","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}